ユーザーの要望：
GitHub、Jules、Gemini CLI GitHub Actionsを使って、経理業務の自動化プロセスを作成したい。

3つのプロセスをデイリー業務で設定したいと考えている。
1. C:\Users\nanayama\Downloads\auto\download-upload
2. C:\Users\nanayama\Downloads\auto\sales
3. C:\Users\nanayama\Downloads\auto\freee-upload

1つめ、天の蔵から昨日のデータをダウンロードして、
2つ目、freeeでインポートするために、天の蔵の取引先マスタから、freeeの取引先マスタへ書き換え、また仕訳の形式に変更
3つ目、freeeに実際にインポートする。ただし、本当にインポートする前に、どのような形式になっているか、エラーなどが出ていないか、を手動で確認する
というイメージ。これをGitHubで作成して、経理部員に使えるようにさせたい。
で、そのためのコードの微調整はJulesのブラウザベースのところに依頼したいので、まず全体感をみてもらいたい。

---

提案した自動化プロセスの全体像：

この自動化は、役割の異なる2つのワークフロー（GitHub Actionsの実行単位）で実現するのが安全かつ確実です。

ワークフローA: データ生成バッチ（毎日定時に自動実行）

1. スケジュール実行: 毎日決まった時間（例えば午前3時）に自動で処理を開始します。
2. データダウンロード: `download-upload/download_data.py` を実行し、天の蔵からデータをダウンロードします。
   - 要変更: 現在のスクリプトは「先月」のデータを取得する仕様なので、「昨日」のデータを取得するように修正が必要です。
3. データ変換: `sales` ディレクトリの一連のスクリプトを実行し、freee形式のCSVファイルを作成します。
   - `fuzzy_match_companies.py` で取引先名をマッチングします。
   - `process_sales_data.py` で部門コードを付与します。
   - `convert_to_freee_format.py` で最終的な `freee_import_sales_data_YYYYMMDD.csv` を生成します。
4. 成果物の保存: 生成されたCSVファイルを「GitHub Artifacts」として保存します。これにより、ファイルがGitHub上に一時的に保管され、いつでもダウンロードできるようになります。
5. 通知: 処理が完了したら、経理担当者にメールやSlackなどで通知します（通知設定は別途必要）。

ワークフローB: freeeへのアップロード（手動で実行）

1. 手動実行: 経理担当者が、ワークフローAで生成されたCSVファイルの内容を確認した後、GitHubの画面からこのワークフローを手動で開始します。
2. 成果物の取得: ワークフローAで保存されたCSVファイルをGitHub Artifactsからダウンロードします。
3. freeeへアップロード: `freee-upload/upload.py` を実行し、取得したCSVファイルをアップロードします。
   - 要変更: 現在のスクリプトは途中で手動入力を待っていますが、これをファイルパスを引数にとって自動でアップロードを完了するように修正します。

---

自動化に向けた準備作業：

1. `requirements.txt`の作成:
   各Pythonスクリプトが依存しているライブラリ（`pandas`, `playwright`, `python-dotenv`, `thefuzz`など）をリストアップした `requirements.txt` ファイルを各ディレクトリ、またはプロジェクトのルートに作成します。これにより、GitHub Actionsの実行環境で必要なライブラリを一度にインストールできます。

2. GitHub Secretsの設定:
   `.env` ファイルに保存されているメールアドレスやパスワードなどの認証情報は、直接コードに書き込まず、GitHubの「Encrypted Secrets」機能に登録します。これにより、安全に認証情報を扱うことができます。

3. ワークフローファイルの作成:
   `.github/workflows/` ディレクトリを作成し、上記のワークフローAとBの定義を記述したYAMLファイル（例: `daily-process.yml`, `upload-to-freee.yml`）を設置します。

4. Pythonスクリプトの修正:
   - `download_data.py`: ダウンロード対象を「昨日」にする。
   - `upload.py`: 手動実行ではなく、指定されたファイルを自動でアップロードするように変更する。
   - 各スクリプトのファイルパスの指定方法を、GitHub Actionsの実行環境でも動作するように見直す（現状の相対パス指定は多くの場合問題ありませんが、確認は必要です）。
